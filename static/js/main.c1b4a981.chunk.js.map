{"version":3,"sources":["sounds/hat.wav","sounds/Acoustic Snare-01.wav","sounds/CYCdh_AcouKick-01.wav","sounds/CYCdh_ElecK01-ClHat01.wav","sounds/CYCdh_ElecK01-OpHat02.wav","sounds/CYCdh_K4-OpHat02.wav","sounds/CYCdh_K4-Snr03.wav","sounds/CYCdh_MultiCrash-01.wav","sounds/CYCdh_VinylK1-Kick03.wav","DrumPad.js","DrumSet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playSound","bind","assertThisInitialized","handleKeyPress","document","addEventListener","removeEventListener","e","key","drum","trigger","toLowerCase","display","description","sound","getElementById","currentTime","play","react_default","a","createElement","className","id","onClick","src","url","Component","DrumSet","drums","map","src_DrumPad","data","snare","hat","kick","elec1","elec2","OpHat","snare2","crash","vinylKick","App","updateDisplay","state","desc","setState","src_DrumSet","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1b4a981.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hat.210d854b.wav\";","module.exports = __webpack_public_path__ + \"static/media/Acoustic Snare-01.31c616a9.wav\";","module.exports = __webpack_public_path__ + \"static/media/CYCdh_AcouKick-01.d929c19d.wav\";","module.exports = __webpack_public_path__ + \"static/media/CYCdh_ElecK01-ClHat01.075aaf26.wav\";","module.exports = __webpack_public_path__ + \"static/media/CYCdh_ElecK01-OpHat02.d2a2ba18.wav\";","module.exports = __webpack_public_path__ + \"static/media/CYCdh_K4-OpHat02.2e581415.wav\";","module.exports = __webpack_public_path__ + \"static/media/CYCdh_K4-Snr03.3fe30682.wav\";","module.exports = __webpack_public_path__ + \"static/media/CYCdh_MultiCrash-01.5d5ca4e9.wav\";","module.exports = __webpack_public_path__ + \"static/media/CYCdh_VinylK1-Kick03.c8cf78a1.wav\";","import React, { Component } from \"react\";\n\nclass DrumPad extends Component {\n  constructor(props) {\n    super(props);\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  handleKeyPress(e) {\n    if (e.key === this.props.drum.trigger.toLowerCase()) {\n      this.playSound();\n    }\n  }\n\n  playSound(e) {\n    this.props.display(this.props.drum.description);\n\n    let sound = document.getElementById(this.props.drum.trigger);\n\n    sound.currentTime = 0;\n    sound.play();\n  }\n  render() {\n    //console.log(\"props\", this.props);\n    return (\n      <div\n        className=\"drum-pad\"\n        id={this.props.drum.description}\n        onClick={this.playSound}\n      >\n        <audio\n          className=\"clip\"\n          id={this.props.drum.trigger}\n          src={this.props.drum.url}\n        />\n        {this.props.drum.trigger}\n      </div>\n    );\n  }\n}\n\nexport default DrumPad;\n","import React, { Component } from \"react\";\nimport DrumPad from \"./DrumPad\";\n\nclass DrumSet extends Component {\n  render() {\n    let drums = this.props.drums;\n\n    return (\n      <div>\n        <h1>DrumSet</h1>\n        {drums.map(drum => (\n          <DrumPad\n            drum={drum}\n            key={drum.description}\n            display={this.props.display}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default DrumSet;\n","import React, { Component } from \"react\";\nimport DrumSet from \"./DrumSet\";\nimport hat from \"./sounds/hat.wav\";\nimport snare from \"./sounds/Acoustic Snare-01.wav\";\nimport kick from \"./sounds/CYCdh_AcouKick-01.wav\";\nimport elec1 from \"./sounds/CYCdh_ElecK01-ClHat01.wav\";\nimport elec2 from \"./sounds/CYCdh_ElecK01-OpHat02.wav\";\nimport OpHat from \"./sounds/CYCdh_K4-OpHat02.wav\";\nimport snare2 from \"./sounds/CYCdh_K4-Snr03.wav\";\nimport crash from \"./sounds/CYCdh_MultiCrash-01.wav\";\nimport vinylKick from \"./sounds/CYCdh_VinylK1-Kick03.wav\";\n\nlet data = [\n  {\n    url: snare,\n    description: \"Hi Hat\",\n    trigger: \"Q\"\n  },\n  {\n    url: hat,\n    description: \"Snare\",\n    trigger: \"W\"\n  },\n  {\n    url: kick,\n    description: \"Kick\",\n    trigger: \"E\"\n  },\n  {\n    url: elec1,\n    description: \"Electric 1\",\n    trigger: \"A\"\n  },\n  {\n    url: elec2,\n    description: \"Electric 2\",\n    trigger: \"S\"\n  },\n  {\n    url: OpHat,\n    description: \"Op Hat\",\n    trigger: \"D\"\n  },\n  {\n    url: snare2,\n    description: \"Snare 2\",\n    trigger: \"Z\"\n  },\n  {\n    url: crash,\n    description: \"Multi Crash\",\n    trigger: \"X\"\n  },\n  {\n    url: vinylKick,\n    description: \"Vinyl Kick\",\n    trigger: \"C\"\n  }\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.state = {\n      data: data,\n      display: \"\"\n    };\n  }\n\n  updateDisplay(desc) {\n    this.setState({\n      display: desc\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"drum-machine\">\n          Drum Machine\n          <div id=\"display\">{this.state.display}</div>\n          <DrumSet drums={this.state.data} display={this.updateDisplay} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}